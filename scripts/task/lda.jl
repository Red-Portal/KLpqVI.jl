ldastandata = [
    Dict(
        "K" => 2,
        "V" => 5,
        "M" => 25,
        "N" => 262,
        "w" => [4, 3, 5, 4, 3, 3, 3, 3, 3, 4, 5, 3, 4, 4, 5,
                3, 4, 4, 4, 3, 5, 4, 5, 2, 3, 3, 1, 5, 5, 1, 4,
                3, 1, 2, 5, 4, 4, 3, 5, 4, 2, 4, 5, 3, 4, 1, 4,
                4, 3, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 3, 1, 2, 2,
                4, 4, 5, 4, 5, 5, 4, 3, 5, 4, 4, 4, 2, 2, 1, 1,
                2, 1, 3, 1, 2, 1, 1, 1, 3, 2, 3, 3, 5, 4, 5, 4,
                3, 5, 4, 2, 2, 2, 1, 3, 2, 1, 3, 1, 3, 1, 1, 2,
                1, 2, 2, 4, 4, 4, 5, 5, 4, 4, 5, 4, 3, 3, 3, 1,
                3, 3, 4, 2, 1, 3, 4, 4, 5, 4, 4, 4, 3, 4, 3, 4,
                5, 1, 2, 1, 3, 2, 1, 1, 2, 3, 3, 3, 3, 4, 1, 4,
                4, 4, 4, 3, 4, 4, 1, 2, 2, 3, 3, 1, 1, 4, 1, 3,
                1, 5, 3, 2, 2, 1, 1, 2, 3, 3, 4, 4, 5, 3, 4, 3,
                1, 5, 5, 5, 3, 3, 4, 5, 3, 3, 3, 2, 3, 1, 3, 3,
                1, 3, 1, 5, 5, 5, 2, 2, 3, 3, 3, 1, 1, 5, 5, 5,
                3, 1, 5, 4, 1, 3, 3, 3, 3, 4, 2, 5, 1, 3, 5, 2,
                5, 5, 2, 1, 3, 3, 5, 3, 5, 3, 3, 5, 1, 2, 2, 1,
                1, 2, 1, 2, 3, 1, 1],
        "doc" => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
                  2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                  3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                  4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                  6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8,
                  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
                  9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                  10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12,
                  12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14,
                  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15,
                  15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,
                  16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
                  17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19,
                  19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
                  20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                  22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23,
                  23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24,
                  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                  25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
        "alpha" => [0.5, 0.5],
        "beta" => [0.2, 0.2, 0.2, 0.2, 0.2]
    )
]

Turing.@model ldamodel(K, V, M, N, w, doc, beta, alpha) = begin
    theta = Vector{Vector{Real}}(undef, M)
    @simd for m = 1:M
        @inbounds theta[m] ~ Dirichlet(alpha)
    end

    phi = Vector{Vector{Real}}(undef, K)
    @simd for k = 1:K
        @inbounds phi[k] ~ Dirichlet(beta)
    end

    phi_dot_theta = log.(hcat(phi...) * hcat(theta...))
    Turing.@addlogprob! mapreduce(n->phi_dot_theta[w[n], doc[n]], +, 1:N)
end

Turing.@model ldamodel_vec(K, V, M, N, w, doc, beta, alpha) = begin
    theta = Matrix{Real}(undef, K, M)
    theta ~ [Dirichlet(alpha)]

    phi = Matrix{Real}(undef, V, K)
    phi ~ [Dirichlet(beta)]

    phi_dot_theta = log(phi * theta)
    #for n = 1:N
    #  Turing.acclogp!(vi, phi_dot_theta[w[n], doc[n]])
    #end
    lp = mapreduce(n->phi_dot_theta[w[n], doc[n]], +, 1:N)
    Turing.acclogp!(vi, lp)
end
